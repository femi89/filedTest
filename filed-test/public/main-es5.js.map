{"version":3,"sources":["webpack:///$_lazy_route_resource lazy namespace object","webpack:///src/app/app-routing.module.ts","webpack:///src/app/app.component.ts","webpack:///src/app/app.component.html","webpack:///src/app/app.module.ts","webpack:///src/app/dashboard/dashboard.component.ts","webpack:///src/app/dashboard/dashboard.component.html","webpack:///src/app/payment/payment.component.ts","webpack:///src/app/payment/payment.component.html","webpack:///src/app/services/payment.service.ts","webpack:///src/app/services/storage.service.ts","webpack:///src/app/store/actions/payment.action.ts","webpack:///src/app/store/app.states.ts","webpack:///src/app/store/effects/payment.effects.ts","webpack:///src/app/store/reducers/payment.reducer.ts","webpack:///src/environments/environment.ts","webpack:///src/main.ts"],"names":["webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","module","exports","id","routes","path","component","redirectTo","pathMatch","AppRoutingModule","forRoot","imports","AppComponent","messageService","title","selector","templateUrl","styleUrls","providers","options","AppModule","declarations","bootstrap","DashboardComponent","store","paymentComplete","savedPayment","error","getState","select","subscribe","state","paymentStatus","payment","PaymentComponent","formBuilder","paymentService","router","validName","paymentForm","group","cardNumber","required","cardHolder","amount","minLength","cvv","expiration","today","Date","month","parseInt","year","expireDateControl","get","value","length","rawDate","split","selectYear","selectMonth","setErrors","markAsDirty","payload","add","severity","summary","detail","dispatch","PaymentService","storageService","httpClient","baseUrl","data","post","put","savePaymentData","providedIn","StorageService","paymentData","paymentData$","asObservable","next","PaymentActionTypes","PaymentAction","type","PAYMENT","PaymentComplete","PAYMENT_COMPLETE","PaymentFailed","PAYMENT_FAILED","reducers","selectPaymentState","PaymentEffects","actions","MakePayment","pipe","action$","postPayment","res","LogInSuccess","navigate","navigateByUrl","LogInFailure","initialState","reducer","action","environment","production","bootstrapModule","err","console"],"mappings":"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","file":"main-es5.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport {AppComponent} from './app.component';\nimport {PaymentComponent} from './payment/payment.component';\nimport {DashboardComponent} from './dashboard/dashboard.component';\n\n\nconst routes: Routes = [\n  {\n    path: 'home',\n    component: DashboardComponent\n  },\n  {\n    path: 'payment',\n    component: PaymentComponent,\n  },\n  {\n    path: '',\n    redirectTo: 'home',\n    pathMatch: 'full'\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","import {Component, OnInit} from '@angular/core';\nimport {MessageService} from 'primeng/api';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss'],\n  providers: [MessageService],\n})\nexport class AppComponent implements OnInit{\n  title = 'filedTest';\n  constructor(\n    private messageService: MessageService\n  ) {\n  }\n\n  ngOnInit(): void {\n  }\n}\n","<router-outlet></router-outlet>\n<p-toast></p-toast>\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport {PanelModule} from 'primeng/panel';\nimport {BrowserAnimationsModule} from '@angular/platform-browser/animations';\nimport {ToastModule} from 'primeng/toast';\nimport {IConfig, NgxMaskModule} from 'ngx-mask';\nimport {InputTextModule} from 'primeng/inputtext';\nimport { PaymentComponent } from './payment/payment.component';\nimport {ButtonModule} from 'primeng/button';\nimport { DashboardComponent } from './dashboard/dashboard.component';\nimport {ReactiveFormsModule} from '@angular/forms';\nimport {InputNumberModule} from 'primeng/inputnumber';\nimport {KeyFilterModule} from 'primeng/keyfilter';\nimport {RippleModule} from 'primeng/ripple';\nimport {InputMaskModule} from 'primeng/inputmask';\nimport {MessageService} from 'primeng/api';\nimport { EffectsModule } from '@ngrx/effects';\nimport {StoreModule} from '@ngrx/store';\nimport {PaymentEffects} from './store/effects/payment.effects';\nimport {reducers} from './store/app.states';\nimport {HttpClient, HttpClientModule} from '@angular/common/http';\nexport const options: Partial<IConfig> | (() => Partial<IConfig>) = null;\n@NgModule({\n  declarations: [\n    AppComponent,\n    PaymentComponent,\n    DashboardComponent\n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    PanelModule,\n    BrowserAnimationsModule,\n    ToastModule,\n    NgxMaskModule.forRoot(),\n    InputTextModule,\n    ButtonModule,\n    ReactiveFormsModule,\n    InputNumberModule,\n    KeyFilterModule,\n    RippleModule,\n    HttpClientModule,\n    InputMaskModule,\n    EffectsModule.forRoot([PaymentEffects]),\n    StoreModule.forRoot(reducers, {}),\n  ],\n  providers: [MessageService],\n  bootstrap: [AppComponent]\n})\nexport class AppModule {\n\n}\n","import { Component, OnInit } from '@angular/core';\nimport {Payment, States} from '../interfaces/payment';\nimport {Observable} from 'rxjs';\nimport {State, Store} from '@ngrx/store';\nimport {AppStates, selectPaymentState} from '../store/app.states';\n\n@Component({\n  selector: 'app-dashboard',\n  templateUrl: './dashboard.component.html',\n  styleUrls: ['./dashboard.component.scss']\n})\nexport class DashboardComponent implements OnInit {\n  getState: Observable<any>;\n  paymentComplete = false;\n  savedPayment: Payment = null;\n  public error: string = null;\n  constructor(\n    private store: Store<AppStates>,\n) {\n    this.getState = this.store.select(selectPaymentState);\n  }\n\n  ngOnInit(): void {\n    this.getState.subscribe((state: States) => {\n      this.paymentComplete = state.paymentStatus;\n      this.savedPayment = state.payment;\n      this.error = state.error;\n    });\n  }\n}\n","<p-toast></p-toast>\n<div *ngIf=\"paymentComplete; else makePayment\">\n  <div class=\"container\">\n    <div class=\"row justify-content-center align-items-center full-height\">\n      <div class=\"col-md-5\">\n        <p-panel header=\"Payment Information\">\n          <div>\n            <ul class=\"list-unstyled\">\n              <p>You just make payment of $ {{savedPayment.amount | mask: 'separator.2': ','}} with the following card information:</p>\n              <li>card Holder: {{savedPayment.cardHolder}}</li>\n              <li>card number: {{savedPayment.cardNumber}}</li>\n              <li>card expired date: {{savedPayment.expiration}}</li>\n              <li>CVV: {{savedPayment.cvv}}</li>\n            </ul>\n            <div class=\"\">\n              <button pButton class=\"p-button-success\" label=\"Make New payment\" routerLink=\"/payment\"></button>\n            </div>\n          </div>\n        </p-panel>\n      </div>\n    </div>\n  </div>\n</div>\n<ng-template #makePayment>\n  <div class=\"container\">\n    <div class=\"row justify-content-center align-items-center full-height\">\n      <div class=\"col-md-5\">\n        <p-panel header=\"New Payment\">\n          <div>\n            <p>You dont have any payment information yet. made payment to continue</p>\n            <button pButton class=\"p-button-success\" label=\"Add payment\" routerLink=\"/payment\"></button>\n          </div>\n        </p-panel>\n      </div>\n    </div>\n  </div>\n\n</ng-template>\n\n","import { Component, OnInit } from '@angular/core';\nimport {FormBuilder, FormGroup, Validators} from '@angular/forms';\nimport {formatDate} from '@angular/common';\nimport {MessageService} from 'primeng/api';\nimport {PaymentService} from '../services/payment.service';\nimport {Router} from '@angular/router';\nimport {Store} from '@ngrx/store';\nimport {AppStates} from '../store/app.states';\nimport {PaymentAction} from '../store/actions/payment.action';\n\n@Component({\n  selector: 'app-payment',\n  templateUrl: './payment.component.html',\n  styleUrls: ['./payment.component.scss'],\n})\nexport class PaymentComponent implements OnInit {\n  paymentForm: FormGroup;\n  validName: RegExp = /^[^<>*!]+$/;\n  currentDate;\n  constructor(\n    private formBuilder: FormBuilder,\n    private messageService: MessageService,\n    private paymentService: PaymentService,\n    public router: Router,\n    private store: Store<AppStates>\n  ) { }\n\n  ngOnInit(): void {\n    this.paymentForm = this.formBuilder.group({\n      cardNumber: ['', Validators.required],\n      cardHolder: ['', Validators.required],\n      amount: [0, [Validators.required, Validators.minLength(4)]],\n      cvv: [''],\n      expiration: ['', [Validators.required]]\n    });\n  }\n  validate(){\n    const today = new Date();\n    // tslint:disable-next-line:radix\n    const month = parseInt(formatDate(today, 'MM', 'en-us') );\n    // tslint:disable-next-line:radix\n    const year = parseInt(formatDate(today, 'yy', 'en-us'));\n    const expireDateControl = this.paymentForm.get('expiration');\n    if (expireDateControl.value.length === 5 ){\n      // get the year out\n      const expiration = expireDateControl.value;\n      const rawDate = expiration.split('/');\n      const selectYear = parseInt(rawDate[1]);\n      const selectMonth = parseInt(rawDate[0]);\n      // tslint:disable-next-line:radix\n      if (selectYear < year || selectYear > (year + 5)){\n        expireDateControl.setErrors(['invalid date']);\n      } else if (selectYear === year && selectMonth < month){\n        expireDateControl.setErrors(['invalid date month']);\n      }\n    } else{\n      expireDateControl.markAsDirty();\n    }\n  }\n\n  makePayment() {\n    const payload = this.paymentForm.value;\n    this.messageService.add({severity: 'success', summary: 'Complete', detail: 'payment completed'});\n    this.store.dispatch(new PaymentAction(payload));\n    // this.paymentService.postPayment(this.paymentForm.value).then( (result: any) => {\n    //       this.messageService.add({severity: 'success', summary: 'Complete', detail: 'payment completed'});\n    //       this.router.navigate(['home']);\n    //       return;\n    //   });\n  }\n}\n","<p-toast></p-toast>\n<div class=\"container\">\n  <div class=\"row justify-content-center align-items-center full-height\">\n    <div class=\"col-md-8\">\n      <p-panel header=\"Payment panel\">\n        <ng-template pTemplate=\"content\">\n          <form [formGroup]=\"paymentForm\" (ngSubmit)=\"makePayment()\" [noValidate]=\"true\">\n            <div class=\"form-group\">\n              <label for=\"cardNumber\">Card Number</label>\n              <input id=\"cardNumber\" class=\"form-control  {{paymentForm.get('cardNumber').invalid?'ng-invalid ng-dirty':''}}\" pInputText type=\"text\" mask=\"0000-0000-0000-0000\" placeholder=\"0000-0000-0000-0000\" formControlName=\"cardNumber\"/>\n            </div>\n            <div class=\"form-group\">\n              <label for=\"holderName\">Holder Name</label>\n              <input id=\"holderName\" class=\"form-control {{paymentForm.get('cardHolder').invalid?'ng-invalid ng-dirty':''}}\" pInputText type=\"text\" [pKeyFilter]=\"validName\" formControlName=\"cardHolder\" />\n            </div>\n            <div class=\"form-group\">\n              <label for=\"amount\">Amount</label>\n              <span class=\"p-input-icon-left form-control\">\n                <i class=\"pi pi-dollar\"></i>\n                <input pInputText class=\"form-control {{paymentForm.get('amount').invalid?'ng-invalid ng-dirty':''}}\" id=\"amount\" mask=\"separator.2\" thousandSeparator=\",\" formControlName=\"amount\">\n              </span>\n\n            </div>\n            <div class=\"row\">\n              <div class=\"col-6\">\n                <div class=\"form-group\">\n                  <label for=\"expired\">Expired</label>\n                  <input id=\"expired\" (ngModelChange)=\"validate()\" class=\"form-control {{paymentForm.get('expiration').invalid?'ng-invalid ng-dirty':''}}\" aria-describedby=\"expired-help\" pInputText type=\"text\" mask=\"M0/00\" [dropSpecialCharacters]=\"false\" [leadZeroDateTime]=\"true\" formControlName=\"expiration\">\n                  <small *ngIf=\"paymentForm.get('expiration').invalid\" id=\"expired-help\" class=\"p-error\">Expiration date is invalid</small>\n                </div>\n              </div>\n              <div class=\"col-6\">\n                <div class=\"form-group\">\n                  <label>CVV <small>(optional)</small></label>\n                  <input class=\"form-control {{paymentForm.get('cvv').invalid?'ng-invalid ng-dirty':''}}\" pInputText type=\"text\" mask=\"000\" formControlName=\"cvv\" [dropSpecialCharacters]=\"false\" [hiddenInput]=\"true\">\n                </div>\n              </div>\n            </div>\n            <div class=\"form-group d-flex justify-content-between\">\n              <button type=\"button\" pButton label=\"Cancel Payment\" routerLink=\"/home\"></button>\n              <button type=\"button\" pButton class=\"p-button\" [disabled]=\"paymentForm.invalid\" (click)=\"makePayment()\" label=\"Pay ${{paymentForm.get('amount').value|mask:'separator.2': ','}}\"></button>\n            </div>\n          </form>\n        </ng-template>\n      </p-panel>\n    </div>\n  </div>\n</div>\n","import {Injectable} from '@angular/core';\nimport {Payment} from '../interfaces/payment';\nimport {Observable} from 'rxjs';\nimport {StorageService} from './storage.service';\nimport {HttpClient} from '@angular/common/http';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class PaymentService {\n\n  constructor(public storageService: StorageService, private httpClient: HttpClient) {\n  }\n\n  const;\n  baseUrl = 'https://123.0.0.1/payment/';\n\n  allPayment() {\n    return this.httpClient.get<Payment>(this.baseUrl);\n  }\n\n  getPaymentById(id): Observable<Payment> {\n    return this.httpClient.get<Payment>(this.baseUrl + id);\n  }\n\n  createPayment(data): Observable<Payment> {\n    return this.httpClient.post<Payment>(this.baseUrl, data);\n  }\n\n  deletePayment(id): Observable<any> {\n    return this.httpClient.delete(this.baseUrl + id);\n  }\n\n  updatePayment(id, data): Observable<Payment> {\n    return this.httpClient.put<Payment>(this.baseUrl + id, data);\n  }\n\n  postPayment(data): Promise<any> {// this is used for creating payment because the api is npt available\n    return this.storageService.savePaymentData(data);\n  }\n}\n","import { Injectable } from '@angular/core';\n// import {Store} from '@ngrx/store';\nimport {Observable, Subject} from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class StorageService {\n  public paymentData = new Subject<any>();\n  paymentData$ = this.paymentData.asObservable();\n  constructor(\n  ) { }\n  // using angular RXJS state management\n  async savePaymentData(data){\n     return this.paymentData.next(data);\n  }\n  getPaymentData(): Observable<any>{\n    return this.paymentData$;\n  }\n  get paymentDat(){\n    return this.paymentData$;\n  }\n}\n","import {Action} from '@ngrx/store';\n\nexport enum PaymentActionTypes {\n  PAYMENT = '[MakePayment] Payments',\n  PAYMENT_COMPLETE = '[Payment] Payments Complete',\n  PAYMENT_FAILED = '[MakePayment] Payments Failed',\n}\nexport class PaymentAction implements Action{\n  readonly type = PaymentActionTypes.PAYMENT;\n  constructor(public payload: any) {\n  }\n}\nexport class PaymentComplete implements Action {\n  readonly type = PaymentActionTypes.PAYMENT_COMPLETE;\n  constructor(public payload: any) {\n  }\n}\nexport class PaymentFailed implements Action {\n  readonly type = PaymentActionTypes.PAYMENT_FAILED;\n  constructor(public payload: any) {}\n}\nexport type All =\n  | PaymentAction\n  |PaymentComplete\n  |PaymentFailed;\n","import * as payment from './reducers/payment.reducer';\nimport {createFeatureSelector} from '@ngrx/store';\nexport interface AppStates {\n  paymentState: payment.State;\n}\nexport const reducers = {\n  payment: payment.reducer\n};\nexport const selectPaymentState = createFeatureSelector<AppStates>('payment');\n","import {Injectable} from '@angular/core';\nimport {Action} from '@ngrx/store';\nimport {Router} from '@angular/router';\nimport {Actions, Effect, ofType} from '@ngrx/effects';\nimport {exhaustMap, tap} from 'rxjs/operators';\nimport {PaymentService} from '../../services/payment.service';\nimport {PaymentAction, PaymentActionTypes, PaymentComplete, PaymentFailed, All} from '../actions/payment.action';\nimport {Observable} from 'rxjs';\nimport {MessageService} from 'primeng/api';\n\n\n@Injectable()\nexport class PaymentEffects {\n\n  constructor(\n    private actions: Actions,\n    private paymentService: PaymentService,\n    private router: Router,\n    private messageService: MessageService,\n  ) {\n  }\n\n  // effects go here\n  // @ts-ignore\n  @Effect()\n  MakePayment: Observable<any> = this.actions.pipe(\n    ofType(PaymentActionTypes.PAYMENT),\n    exhaustMap((action$: PaymentAction) =>\n       this.paymentService.postPayment(action$.payload)\n         .then((res: any) => {\n           return new PaymentComplete(action$.payload);\n         }\n      )\n    )\n    // .switchMap(payload => {\n    //   .map((res) => {\n    //     console.log(res);\n    //     return new PaymentComplete(res);\n    //   })\n    //   .catch((error) => {\n    //     console.log(error);\n    //     // return Observable.of(new LogInFailure({ errors: error }));\n    //   });\n    // });\n  );\n  @Effect({ dispatch: false })\n  LogInSuccess: Observable<any> = this.actions.pipe(\n    ofType(PaymentActionTypes.PAYMENT_COMPLETE),\n    tap(() => {\n      this.router.navigate(['home']).then(\n        () => this.messageService.add({severity: 'success', detail: 'payment Complete', summary: 'Complete'})\n      );\n      this.router.navigateByUrl('/home');\n    })\n  );\n\n  @Effect({dispatch: false})\n  LogInFailure: Observable<any> = this.actions.pipe(\n    ofType(PaymentActionTypes.PAYMENT_FAILED)\n  );\n}\n","import {Payment} from '../../interfaces/payment';\nimport {All, PaymentAction, PaymentActionTypes} from '../actions/payment.action';\n\nexport interface State{\n  paymentStatus: boolean;\n  payment: Payment | null;\n  error: string | null;\n}\n\nexport const initialState: State = {\n  payment: null,\n  paymentStatus: false,\n  error: null,\n};\nexport function reducer(state = initialState, action: All): State {\n  switch (action.type) {\n    case PaymentActionTypes.PAYMENT_COMPLETE: {\n      return {\n        ...state,\n        paymentStatus: true,\n        payment: {\n          cardHolder: action.payload.cardHolder,\n          cardNumber: action.payload.cardNumber,\n          cvv: action.payload.cvv,\n          expiration: action.payload.expiration,\n          amount: action.payload.amount,\n        },\n        error: null\n      };\n    }\n    case PaymentActionTypes.PAYMENT_FAILED: {\n      return {\n        ...state,\n        error: 'no payment yet'\n      };\n    }\n    default: {\n      return state;\n    }\n  }\n}\n\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"]}