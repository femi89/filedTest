{"version":3,"sources":["./$_lazy_route_resource lazy namespace object","./src/app/app-routing.module.ts","./src/app/app.component.ts","./src/app/app.component.html","./src/app/app.module.ts","./src/app/dashboard/dashboard.component.ts","./src/app/dashboard/dashboard.component.html","./src/app/payment/payment.component.ts","./src/app/payment/payment.component.html","./src/app/services/payment.service.ts","./src/app/services/storage.service.ts","./src/app/store/actions/payment.action.ts","./src/app/store/app.states.ts","./src/app/store/effects/payment.effects.ts","./src/app/store/reducers/payment.reducer.ts","./src/environments/environment.ts","./src/main.ts"],"names":[],"mappings":"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","file":"main-es2015.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport {AppComponent} from './app.component';\nimport {PaymentComponent} from './payment/payment.component';\nimport {DashboardComponent} from './dashboard/dashboard.component';\n\n\nconst routes: Routes = [\n  {\n    path: 'home',\n    component: DashboardComponent\n  },\n  {\n    path: 'payment',\n    component: PaymentComponent,\n  },\n  {\n    path: '',\n    redirectTo: 'home',\n    pathMatch: 'full'\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","import {Component, OnInit} from '@angular/core';\nimport {MessageService} from 'primeng/api';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss'],\n  providers: [MessageService],\n})\nexport class AppComponent implements OnInit{\n  title = 'filedTest';\n  constructor(\n    private messageService: MessageService\n  ) {\n  }\n\n  ngOnInit(): void {\n  }\n}\n","<router-outlet></router-outlet>\n<p-toast></p-toast>\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport {PanelModule} from 'primeng/panel';\nimport {BrowserAnimationsModule} from '@angular/platform-browser/animations';\nimport {ToastModule} from 'primeng/toast';\nimport {IConfig, NgxMaskModule} from 'ngx-mask';\nimport {InputTextModule} from 'primeng/inputtext';\nimport { PaymentComponent } from './payment/payment.component';\nimport {ButtonModule} from 'primeng/button';\nimport { DashboardComponent } from './dashboard/dashboard.component';\nimport {ReactiveFormsModule} from '@angular/forms';\nimport {InputNumberModule} from 'primeng/inputnumber';\nimport {KeyFilterModule} from 'primeng/keyfilter';\nimport {RippleModule} from 'primeng/ripple';\nimport {InputMaskModule} from 'primeng/inputmask';\nimport {MessageService} from 'primeng/api';\nimport { EffectsModule } from '@ngrx/effects';\nimport {StoreModule} from '@ngrx/store';\nimport {PaymentEffects} from './store/effects/payment.effects';\nimport {reducers} from './store/app.states';\nimport {HttpClient, HttpClientModule} from '@angular/common/http';\nexport const options: Partial<IConfig> | (() => Partial<IConfig>) = null;\n@NgModule({\n  declarations: [\n    AppComponent,\n    PaymentComponent,\n    DashboardComponent\n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    PanelModule,\n    BrowserAnimationsModule,\n    ToastModule,\n    NgxMaskModule.forRoot(),\n    InputTextModule,\n    ButtonModule,\n    ReactiveFormsModule,\n    InputNumberModule,\n    KeyFilterModule,\n    RippleModule,\n    HttpClientModule,\n    InputMaskModule,\n    EffectsModule.forRoot([PaymentEffects]),\n    StoreModule.forRoot(reducers, {}),\n  ],\n  providers: [MessageService],\n  bootstrap: [AppComponent]\n})\nexport class AppModule {\n\n}\n","import { Component, OnInit } from '@angular/core';\nimport {Payment, States} from '../interfaces/payment';\nimport {Observable} from 'rxjs';\nimport {State, Store} from '@ngrx/store';\nimport {AppStates, selectPaymentState} from '../store/app.states';\n\n@Component({\n  selector: 'app-dashboard',\n  templateUrl: './dashboard.component.html',\n  styleUrls: ['./dashboard.component.scss']\n})\nexport class DashboardComponent implements OnInit {\n  getState: Observable<any>;\n  paymentComplete = false;\n  savedPayment: Payment = null;\n  public error: string = null;\n  constructor(\n    private store: Store<AppStates>,\n) {\n    this.getState = this.store.select(selectPaymentState);\n  }\n\n  ngOnInit(): void {\n    this.getState.subscribe((state: States) => {\n      this.paymentComplete = state.paymentStatus;\n      this.savedPayment = state.payment;\n      this.error = state.error;\n    });\n  }\n}\n","<p-toast></p-toast>\n<div *ngIf=\"paymentComplete; else makePayment\">\n  <div class=\"container\">\n    <div class=\"row justify-content-center align-items-center full-height\">\n      <div class=\"col-md-5\">\n        <p-panel header=\"Payment Information\">\n          <div>\n            <ul class=\"list-unstyled\">\n              <p>You just make payment of $ {{savedPayment.amount | mask: 'separator.2': ','}} with the following card information:</p>\n              <li>card Holder: {{savedPayment.cardHolder}}</li>\n              <li>card number: {{savedPayment.cardNumber}}</li>\n              <li>card expired date: {{savedPayment.expiration}}</li>\n              <li>CVV: {{savedPayment.cvv}}</li>\n            </ul>\n            <div class=\"\">\n              <button pButton class=\"p-button-success\" label=\"Make New payment\" routerLink=\"/payment\"></button>\n            </div>\n          </div>\n        </p-panel>\n      </div>\n    </div>\n  </div>\n</div>\n<ng-template #makePayment>\n  <div class=\"container\">\n    <div class=\"row justify-content-center align-items-center full-height\">\n      <div class=\"col-md-5\">\n        <p-panel header=\"New Payment\">\n          <div>\n            <p>You dont have any payment information yet. made payment to continue</p>\n            <button pButton class=\"p-button-success\" label=\"Add payment\" routerLink=\"/payment\"></button>\n          </div>\n        </p-panel>\n      </div>\n    </div>\n  </div>\n\n</ng-template>\n\n","import { Component, OnInit } from '@angular/core';\nimport {FormBuilder, FormGroup, Validators} from '@angular/forms';\nimport {formatDate} from '@angular/common';\nimport {MessageService} from 'primeng/api';\nimport {PaymentService} from '../services/payment.service';\nimport {Router} from '@angular/router';\nimport {Store} from '@ngrx/store';\nimport {AppStates} from '../store/app.states';\nimport {PaymentAction} from '../store/actions/payment.action';\n\n@Component({\n  selector: 'app-payment',\n  templateUrl: './payment.component.html',\n  styleUrls: ['./payment.component.scss'],\n})\nexport class PaymentComponent implements OnInit {\n  paymentForm: FormGroup;\n  validName: RegExp = /^[^<>*!]+$/;\n  currentDate;\n  constructor(\n    private formBuilder: FormBuilder,\n    private messageService: MessageService,\n    private paymentService: PaymentService,\n    public router: Router,\n    private store: Store<AppStates>\n  ) { }\n\n  ngOnInit(): void {\n    this.paymentForm = this.formBuilder.group({\n      cardNumber: ['', Validators.required],\n      cardHolder: ['', Validators.required],\n      amount: [0, [Validators.required, Validators.minLength(4)]],\n      cvv: [''],\n      expiration: ['', [Validators.required]]\n    });\n  }\n  validate(){\n    const today = new Date();\n    // tslint:disable-next-line:radix\n    const month = parseInt(formatDate(today, 'MM', 'en-us') );\n    // tslint:disable-next-line:radix\n    const year = parseInt(formatDate(today, 'yy', 'en-us'));\n    const expireDateControl = this.paymentForm.get('expiration');\n    if (expireDateControl.value.length === 5 ){\n      // get the year out\n      const expiration = expireDateControl.value;\n      const rawDate = expiration.split('/');\n      const selectYear = parseInt(rawDate[1]);\n      const selectMonth = parseInt(rawDate[0]);\n      // tslint:disable-next-line:radix\n      if (selectYear < year || selectYear > (year + 5)){\n        expireDateControl.setErrors(['invalid date']);\n      } else if (selectYear === year && selectMonth < month){\n        expireDateControl.setErrors(['invalid date month']);\n      }\n    } else{\n      expireDateControl.markAsDirty();\n    }\n  }\n\n  makePayment() {\n    const payload = this.paymentForm.value;\n    this.messageService.add({severity: 'success', summary: 'Complete', detail: 'payment completed'});\n    this.store.dispatch(new PaymentAction(payload));\n    // this.paymentService.postPayment(this.paymentForm.value).then( (result: any) => {\n    //       this.messageService.add({severity: 'success', summary: 'Complete', detail: 'payment completed'});\n    //       this.router.navigate(['home']);\n    //       return;\n    //   });\n  }\n}\n","<p-toast></p-toast>\n<div class=\"container\">\n  <div class=\"row justify-content-center align-items-center full-height\">\n    <div class=\"col-md-8\">\n      <p-panel header=\"Payment panel\">\n        <ng-template pTemplate=\"content\">\n          <form [formGroup]=\"paymentForm\" (ngSubmit)=\"makePayment()\" [noValidate]=\"true\">\n            <div class=\"form-group\">\n              <label for=\"cardNumber\">Card Number</label>\n              <input id=\"cardNumber\" class=\"form-control  {{paymentForm.get('cardNumber').invalid?'ng-invalid ng-dirty':''}}\" pInputText type=\"text\" mask=\"0000-0000-0000-0000\" placeholder=\"0000-0000-0000-0000\" formControlName=\"cardNumber\"/>\n            </div>\n            <div class=\"form-group\">\n              <label for=\"holderName\">Holder Name</label>\n              <input id=\"holderName\" class=\"form-control {{paymentForm.get('cardHolder').invalid?'ng-invalid ng-dirty':''}}\" pInputText type=\"text\" [pKeyFilter]=\"validName\" formControlName=\"cardHolder\" />\n            </div>\n            <div class=\"form-group\">\n              <label for=\"amount\">Amount</label>\n              <span class=\"p-input-icon-left form-control\">\n                <i class=\"pi pi-dollar\"></i>\n                <input pInputText class=\"form-control {{paymentForm.get('amount').invalid?'ng-invalid ng-dirty':''}}\" id=\"amount\" mask=\"separator.2\" thousandSeparator=\",\" formControlName=\"amount\">\n              </span>\n\n            </div>\n            <div class=\"row\">\n              <div class=\"col-6\">\n                <div class=\"form-group\">\n                  <label for=\"expired\">Expired</label>\n                  <input id=\"expired\" (ngModelChange)=\"validate()\" class=\"form-control {{paymentForm.get('expiration').invalid?'ng-invalid ng-dirty':''}}\" aria-describedby=\"expired-help\" pInputText type=\"text\" mask=\"M0/00\" [dropSpecialCharacters]=\"false\" [leadZeroDateTime]=\"true\" formControlName=\"expiration\">\n                  <small *ngIf=\"paymentForm.get('expiration').invalid\" id=\"expired-help\" class=\"p-error\">Expiration date is invalid</small>\n                </div>\n              </div>\n              <div class=\"col-6\">\n                <div class=\"form-group\">\n                  <label>CVV <small>(optional)</small></label>\n                  <input class=\"form-control {{paymentForm.get('cvv').invalid?'ng-invalid ng-dirty':''}}\" pInputText type=\"text\" mask=\"000\" formControlName=\"cvv\" [dropSpecialCharacters]=\"false\" [hiddenInput]=\"true\">\n                </div>\n              </div>\n            </div>\n            <div class=\"form-group d-flex justify-content-between\">\n              <button type=\"button\" pButton label=\"Cancel Payment\" routerLink=\"/home\"></button>\n              <button type=\"button\" pButton class=\"p-button\" [disabled]=\"paymentForm.invalid\" (click)=\"makePayment()\" label=\"Pay ${{paymentForm.get('amount').value|mask:'separator.2': ','}}\"></button>\n            </div>\n          </form>\n        </ng-template>\n      </p-panel>\n    </div>\n  </div>\n</div>\n","import {Injectable} from '@angular/core';\nimport {Payment} from '../interfaces/payment';\nimport {Observable} from 'rxjs';\nimport {StorageService} from './storage.service';\nimport {HttpClient} from '@angular/common/http';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class PaymentService {\n\n  constructor(public storageService: StorageService, private httpClient: HttpClient) {\n  }\n\n  const;\n  baseUrl = 'https://123.0.0.1/payment/';\n\n  allPayment() {\n    return this.httpClient.get<Payment>(this.baseUrl);\n  }\n\n  getPaymentById(id): Observable<Payment> {\n    return this.httpClient.get<Payment>(this.baseUrl + id);\n  }\n\n  createPayment(data): Observable<Payment> {\n    return this.httpClient.post<Payment>(this.baseUrl, data);\n  }\n\n  deletePayment(id): Observable<any> {\n    return this.httpClient.delete(this.baseUrl + id);\n  }\n\n  updatePayment(id, data): Observable<Payment> {\n    return this.httpClient.put<Payment>(this.baseUrl + id, data);\n  }\n\n  postPayment(data): Promise<any> {// this is used for creating payment because the api is npt available\n    return this.storageService.savePaymentData(data);\n  }\n}\n","import { Injectable } from '@angular/core';\n// import {Store} from '@ngrx/store';\nimport {Observable, Subject} from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class StorageService {\n  public paymentData = new Subject<any>();\n  paymentData$ = this.paymentData.asObservable();\n  constructor(\n  ) { }\n  // using angular RXJS state management\n  async savePaymentData(data){\n     return this.paymentData.next(data);\n  }\n  getPaymentData(): Observable<any>{\n    return this.paymentData$;\n  }\n  get paymentDat(){\n    return this.paymentData$;\n  }\n}\n","import {Action} from '@ngrx/store';\n\nexport enum PaymentActionTypes {\n  PAYMENT = '[MakePayment] Payments',\n  PAYMENT_COMPLETE = '[Payment] Payments Complete',\n  PAYMENT_FAILED = '[MakePayment] Payments Failed',\n}\nexport class PaymentAction implements Action{\n  readonly type = PaymentActionTypes.PAYMENT;\n  constructor(public payload: any) {\n  }\n}\nexport class PaymentComplete implements Action {\n  readonly type = PaymentActionTypes.PAYMENT_COMPLETE;\n  constructor(public payload: any) {\n  }\n}\nexport class PaymentFailed implements Action {\n  readonly type = PaymentActionTypes.PAYMENT_FAILED;\n  constructor(public payload: any) {}\n}\nexport type All =\n  | PaymentAction\n  |PaymentComplete\n  |PaymentFailed;\n","import * as payment from './reducers/payment.reducer';\nimport {createFeatureSelector} from '@ngrx/store';\nexport interface AppStates {\n  paymentState: payment.State;\n}\nexport const reducers = {\n  payment: payment.reducer\n};\nexport const selectPaymentState = createFeatureSelector<AppStates>('payment');\n","import {Injectable} from '@angular/core';\nimport {Action} from '@ngrx/store';\nimport {Router} from '@angular/router';\nimport {Actions, Effect, ofType} from '@ngrx/effects';\nimport {exhaustMap, tap} from 'rxjs/operators';\nimport {PaymentService} from '../../services/payment.service';\nimport {PaymentAction, PaymentActionTypes, PaymentComplete, PaymentFailed, All} from '../actions/payment.action';\nimport {Observable} from 'rxjs';\nimport {MessageService} from 'primeng/api';\n\n\n@Injectable()\nexport class PaymentEffects {\n\n  constructor(\n    private actions: Actions,\n    private paymentService: PaymentService,\n    private router: Router,\n    private messageService: MessageService,\n  ) {\n  }\n\n  // effects go here\n  // @ts-ignore\n  @Effect()\n  MakePayment: Observable<any> = this.actions.pipe(\n    ofType(PaymentActionTypes.PAYMENT),\n    exhaustMap((action$: PaymentAction) =>\n       this.paymentService.postPayment(action$.payload)\n         .then((res: any) => {\n           return new PaymentComplete(action$.payload);\n         }\n      )\n    )\n    // .switchMap(payload => {\n    //   .map((res) => {\n    //     console.log(res);\n    //     return new PaymentComplete(res);\n    //   })\n    //   .catch((error) => {\n    //     console.log(error);\n    //     // return Observable.of(new LogInFailure({ errors: error }));\n    //   });\n    // });\n  );\n  @Effect({ dispatch: false })\n  LogInSuccess: Observable<any> = this.actions.pipe(\n    ofType(PaymentActionTypes.PAYMENT_COMPLETE),\n    tap(() => {\n      this.router.navigate(['home']).then(\n        () => this.messageService.add({severity: 'success', detail: 'payment Complete', summary: 'Complete'})\n      );\n      this.router.navigateByUrl('/home');\n    })\n  );\n\n  @Effect({dispatch: false})\n  LogInFailure: Observable<any> = this.actions.pipe(\n    ofType(PaymentActionTypes.PAYMENT_FAILED)\n  );\n}\n","import {Payment} from '../../interfaces/payment';\nimport {All, PaymentAction, PaymentActionTypes} from '../actions/payment.action';\n\nexport interface State{\n  paymentStatus: boolean;\n  payment: Payment | null;\n  error: string | null;\n}\n\nexport const initialState: State = {\n  payment: null,\n  paymentStatus: false,\n  error: null,\n};\nexport function reducer(state = initialState, action: All): State {\n  switch (action.type) {\n    case PaymentActionTypes.PAYMENT_COMPLETE: {\n      return {\n        ...state,\n        paymentStatus: true,\n        payment: {\n          cardHolder: action.payload.cardHolder,\n          cardNumber: action.payload.cardNumber,\n          cvv: action.payload.cvv,\n          expiration: action.payload.expiration,\n          amount: action.payload.amount,\n        },\n        error: null\n      };\n    }\n    case PaymentActionTypes.PAYMENT_FAILED: {\n      return {\n        ...state,\n        error: 'no payment yet'\n      };\n    }\n    default: {\n      return state;\n    }\n  }\n}\n\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"],"sourceRoot":"webpack:///"}